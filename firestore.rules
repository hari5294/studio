
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read anyone's profile.
    // A user can create their own profile, and update or delete their own profile.
    match /users/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // Badges can be read by anyone.
    // They can only be created or updated by the user listed as the creatorId.
    // Deletion is disallowed to prevent accidental data loss.
    match /badges/{badgeId} {
      allow read: if true;
      allow create, update: if isAuthenticated() && isOwner(resource.data.creatorId);
      allow delete: if false;

      // Owners subcollection:
      // - Anyone can read who owns a badge.
      // - Users can only add themselves as an owner (claiming a badge).
      // - Users can't remove others, only the system can (simulated by disallowing delete).
      match /owners/{userId} {
        allow read: if true;
        allow create: if isAuthenticated() && isOwner(userId);
        allow update, delete: if false;
      }

      // Followers subcollection:
      // - Anyone can read who follows a badge.
      // - Authenticated users can follow/unfollow (create/delete their own follower doc).
      match /followers/{userId} {
        allow read: if true;
        allow create, delete: if isAuthenticated() && isOwner(userId);
        allow update: if false;
      }
    }

    // Share links can be read if you know the ID.
    // They can be created by an authenticated user.
    // They can be updated (to be marked as used) by an authenticated user.
    match /shareLinks/{linkId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false;
    }
    
    // Notifications can only be accessed by the user they are intended for.
    match /users/{userId}/notifications/{notificationId} {
      allow read, write, create, delete: if isAuthenticated() && isOwner(userId);
    }
  }
}
